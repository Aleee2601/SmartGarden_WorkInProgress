// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartGarden.Data.Persistence;

#nullable disable

namespace SmartGarden.Data.Migrations
{
    [DbContext(typeof(SmartGardenDbContext))]
    [Migration("20251030125630_UpdatePlantSchemaWithProperProperties")]
    partial class UpdatePlantSchemaWithProperProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartGarden.Core.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateAcquired")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOutdoor")
                        .HasColumnType("bit");

                    b.Property<double>("MaxMoisture")
                        .HasColumnType("float");

                    b.Property<double>("MinMoisture")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("RoomName")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("SoilTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PlantId");

                    b.HasIndex("SoilTypeId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "IsOutdoor");

                    b.HasIndex("UserId", "SpeciesId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.SensorReading", b =>
                {
                    b.Property<long>("ReadingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ReadingId"));

                    b.Property<double>("AirHumidity")
                        .HasColumnType("float");

                    b.Property<double>("AirQuality")
                        .HasColumnType("float");

                    b.Property<double>("AirTemp")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("LightLevel")
                        .HasColumnType("float");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<double>("SoilMoisture")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("WaterLevel")
                        .HasColumnType("float");

                    b.HasKey("ReadingId");

                    b.HasIndex("PlantId");

                    b.HasIndex("PlantId", "CreatedAt");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.SoilType", b =>
                {
                    b.Property<int>("SoilTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SoilTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("PauseBetweenWaterMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(2);

                    b.Property<int>("RecWaterDueSec")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SoilTypeId");

                    b.ToTable("SoilTypes");

                    b.HasData(
                        new
                        {
                            SoilTypeId = 1,
                            Description = "Mix general pentru plante de interior",
                            Name = "Universal (pământ flori)",
                            PauseBetweenWaterMin = 2,
                            RecWaterDueSec = 5
                        },
                        new
                        {
                            SoilTypeId = 2,
                            Description = "Drenaj rapid, retentie mică",
                            Name = "Cactuși/Suculente (nisipos)",
                            PauseBetweenWaterMin = 5,
                            RecWaterDueSec = 3
                        });
                });

            modelBuilder.Entity("SmartGarden.Core.Models.Species", b =>
                {
                    b.Property<int>("SpeciesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeciesId"));

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<double>("DefaultHumidityMax")
                        .HasColumnType("float");

                    b.Property<double>("DefaultHumidityMin")
                        .HasColumnType("float");

                    b.Property<double>("DefaultLightMax")
                        .HasColumnType("float");

                    b.Property<double>("DefaultLightMin")
                        .HasColumnType("float");

                    b.Property<double>("DefaultSoilMoistMax")
                        .HasColumnType("float");

                    b.Property<double>("DefaultSoilMoistMin")
                        .HasColumnType("float");

                    b.Property<double>("DefaultTempMax")
                        .HasColumnType("float");

                    b.Property<double>("DefaultTempMin")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SpeciesId");

                    b.HasIndex("ScientificName")
                        .IsUnique();

                    b.ToTable("Species");

                    b.HasData(
                        new
                        {
                            SpeciesId = 1,
                            CommonName = "Ficus lyrata",
                            DefaultHumidityMax = 70.0,
                            DefaultHumidityMin = 30.0,
                            DefaultLightMax = 10000.0,
                            DefaultLightMin = 500.0,
                            DefaultSoilMoistMax = 60.0,
                            DefaultSoilMoistMin = 30.0,
                            DefaultTempMax = 27.0,
                            DefaultTempMin = 18.0,
                            ScientificName = "Ficus lyrata"
                        },
                        new
                        {
                            SpeciesId = 2,
                            CommonName = "Monstera deliciosa",
                            DefaultHumidityMax = 80.0,
                            DefaultHumidityMin = 40.0,
                            DefaultLightMax = 8000.0,
                            DefaultLightMin = 300.0,
                            DefaultSoilMoistMax = 65.0,
                            DefaultSoilMoistMin = 30.0,
                            DefaultTempMax = 28.0,
                            DefaultTempMin = 18.0,
                            ScientificName = "Monstera deliciosa"
                        });
                });

            modelBuilder.Entity("SmartGarden.Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.UserSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("AutoWateringEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DataReadIntervalMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(15);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<double>("SoilMoistThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(30.0);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.WateringLog", b =>
                {
                    b.Property<long>("WateringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WateringId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DurationSec")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("Mode")
                        .HasColumnType("int");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("WateringId");

                    b.HasIndex("PlantId", "CreatedAt");

                    b.ToTable("WateringLogs");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.Plant", b =>
                {
                    b.HasOne("SmartGarden.Core.Models.SoilType", "SoilType")
                        .WithMany()
                        .HasForeignKey("SoilTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartGarden.Core.Models.Species", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartGarden.Core.Models.User", "User")
                        .WithMany("Plants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoilType");

                    b.Navigation("Species");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.SensorReading", b =>
                {
                    b.HasOne("SmartGarden.Core.Models.Plant", "Plant")
                        .WithMany("SensorReadings")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.UserSetting", b =>
                {
                    b.HasOne("SmartGarden.Core.Models.User", "User")
                        .WithOne("UserSetting")
                        .HasForeignKey("SmartGarden.Core.Models.UserSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.WateringLog", b =>
                {
                    b.HasOne("SmartGarden.Core.Models.Plant", "Plant")
                        .WithMany("WateringLogs")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.Plant", b =>
                {
                    b.Navigation("SensorReadings");

                    b.Navigation("WateringLogs");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.User", b =>
                {
                    b.Navigation("Plants");

                    b.Navigation("UserSetting");
                });
#pragma warning restore 612, 618
        }
    }
}
