// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartGarden.Data;

#nullable disable

namespace SmartGarden.Data.Migrations
{
    [DbContext(typeof(SmartGardenDbContext))]
    partial class SmartGardenDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartGarden.Core.Models.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("MaxMoisture")
                        .HasColumnType("float");

                    b.Property<double>("MinMoisture")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SoilTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SoilTypeId");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("UserId");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.SensorReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AirQuality")
                        .HasColumnType("float");

                    b.Property<double>("Humidity")
                        .HasColumnType("float");

                    b.Property<double?>("LightLevel")
                        .HasColumnType("float");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<double>("SoilMoisture")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("SensorReadings");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.SoilType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PauseBetweenWaterMin")
                        .HasColumnType("int");

                    b.Property<int>("RecWaterDurSec")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SoilTypes");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.Species", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CommonName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("DefaultHumidMax")
                        .HasColumnType("float");

                    b.Property<double>("DefaultHumidMin")
                        .HasColumnType("float");

                    b.Property<double>("DefaultSoilMoistMax")
                        .HasColumnType("float");

                    b.Property<double>("DefaultSoilMoistMin")
                        .HasColumnType("float");

                    b.Property<double>("DefaultTempMax")
                        .HasColumnType("float");

                    b.Property<double>("DefaultTempMin")
                        .HasColumnType("float");

                    b.Property<int>("DefaultWaterFreqDays")
                        .HasColumnType("int");

                    b.Property<string>("ScientificName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.UserSetting", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("AutoWateringEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("DataReadIntervalMin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(15);

                    b.Property<double>("SoilMoistThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(30.0);

                    b.HasKey("UserId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.WateringLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationSec")
                        .HasColumnType("int");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("WateringLogs");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.Plant", b =>
                {
                    b.HasOne("SmartGarden.Core.Models.SoilType", "SoilType")
                        .WithMany("Plants")
                        .HasForeignKey("SoilTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarden.Core.Models.Species", "Species")
                        .WithMany("Plants")
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartGarden.Core.Models.User", "User")
                        .WithMany("Plants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoilType");

                    b.Navigation("Species");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.SensorReading", b =>
                {
                    b.HasOne("SmartGarden.Core.Models.Plant", "Plant")
                        .WithMany("SensorReadings")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.UserSetting", b =>
                {
                    b.HasOne("SmartGarden.Core.Models.User", "User")
                        .WithOne("UserSetting")
                        .HasForeignKey("SmartGarden.Core.Models.UserSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.WateringLog", b =>
                {
                    b.HasOne("SmartGarden.Core.Models.Plant", "Plant")
                        .WithMany("WateringLogs")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.Plant", b =>
                {
                    b.Navigation("SensorReadings");

                    b.Navigation("WateringLogs");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.SoilType", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.Species", b =>
                {
                    b.Navigation("Plants");
                });

            modelBuilder.Entity("SmartGarden.Core.Models.User", b =>
                {
                    b.Navigation("Plants");

                    b.Navigation("UserSetting");
                });
#pragma warning restore 612, 618
        }
    }
}
